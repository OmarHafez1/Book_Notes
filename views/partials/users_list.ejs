<div class="container py-5">
    <!-- Add User Form -->
    <div class="d-flex align-items-center mt-2 mb-5" style="max-width: 500px; margin: 0 auto;">
        <input type="text" id="new-user-name" class="form-control me-2" placeholder="Enter new user name"
            style="flex: 1;" />
        <button id="add-user-btn" class="btn btn-primary" style="flex-shrink: 0;">Add User</button>
    </div>

    <!-- List of users -->
    <div class="list-group users" id="user-list">
        <% users.forEach((user)=> { %>
            <a class="list-group-item d-flex justify-content-between align-items-center user" user-id="<%= user.id %>">
                <%= user.name %>
                    <i class="bi bi-trash text-danger delete-icon" style="cursor: pointer;"></i>
            </a>
            <% }) %>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        let selectedUser = localStorage.getItem('selectedUser'); // Get stored selected user index
        const userListContainer = document.getElementById('user-list');

        // Highlight the stored selected user
        const updateSelectedUser = async (index) => {
            const userList = document.querySelectorAll('.list-group-item');
            if (selectedUser !== null && userList[selectedUser]) {
                userList[selectedUser].classList.remove('selected-user');
            }
            selectedUser = index;
            if (selectedUser !== null) {
                userList[selectedUser].classList.add('selected-user');
                localStorage.setItem('selectedUser', selectedUser);
                let selectedUserId = userList[selectedUser].getAttribute('user-id');
                localStorage.setItem('selectedUserId', selectedUserId);
                await fetch(`/user/set-user/${selectedUserId}`, { method: 'POST' });
            } else {
                localStorage.removeItem('selectedUser');
                localStorage.removeItem('selectedUserId');
                await fetch(`/user/set-user/${-1}`, { method: 'POST' });
            }
        };
        
        if (selectedUser !== null) {
            updateSelectedUser(selectedUser);
        }

        // Event Delegation
        userListContainer.addEventListener('click', async (e) => {
            const userList = document.querySelectorAll('.list-group-item');
            const target = e.target;
            
            if (target.classList.contains('delete-icon')) {
                e.stopPropagation();
                const item = target.closest('.list-group-item');
                const userId = item.getAttribute('user-id');
                
                try {
                    const response = await fetch(`/user/delete/${userId}`, { method: 'DELETE' });
                    const result = await response.json();

                    if (response.ok && result.success) {
                        item.remove();
                        if (userList[selectedUser].getAttribute('user-id') === userId) {
                            updateSelectedUser(selectedUser);
                        }
                    } else {
                        alert(result.error || 'Failed to delete user');
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    alert('An error occurred while deleting the user.');
                }
            } else if (target.classList.contains('list-group-item')) {
                updateSelectedUser(Array.from(userListContainer.children).indexOf(target));
            }
        });

        // Add User
        document.getElementById('add-user-btn').addEventListener('click', async () => {
            const userNameInput = document.getElementById('new-user-name');
            const userName = userNameInput.value.trim();
            
            if (!userName) {
                alert('Please enter a valid name.');
                return;
            }

            try {
                const response = await fetch('/user/add/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: userName }),
                });

                if (response.ok) {
                    const newUser = await response.json();
                    const newUserItem = document.createElement('a');
                    newUserItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                    newUserItem.setAttribute('user-id', newUser.user.id);
                    newUserItem.innerHTML = `${newUser.user.name} <i class="bi bi-trash text-danger delete-icon" style="cursor: pointer;"></i>`;
                    userListContainer.appendChild(newUserItem);
                    userNameInput.value = '';
                } else {
                    alert('Failed to add user');
                }
            } catch (error) {
                console.error('Error adding user:', error);
                alert('An error occurred while adding the user.');
            }
        });

        // Handle Enter key for Add User
        document.getElementById('new-user-name').addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('add-user-btn').click();
            }
        });

        document.addEventListener('keydown', async (e) => {
            const userList = document.querySelectorAll('.list-group-item');
            let selectedUser = localStorage.getItem('selectedUser');
            if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {

                if (userList.length === 0) return;

                selectedUser = selectedUser === null ? null : Number(selectedUser);

                // Remove 'active' from the currently selected user
                if (selectedUser !== null && userList[selectedUser]) {
                    userList[selectedUser].classList.remove('active');
                }

                if (e.key === 'ArrowUp') {
                    selectedUser = (selectedUser === null || selectedUser === 0) ? userList.length - 1 : selectedUser - 1;
                } else {
                    selectedUser = (selectedUser === null || selectedUser === userList.length - 1) ? 0 : selectedUser + 1;
                }
                
                userList[selectedUser].classList.add('active');
                localStorage.setItem('selectedUser', selectedUser);
                let selectedUserId = userList[selectedUser].getAttribute('user-id');
                localStorage.setItem('selectedUserId', selectedUserId);
                await fetch(`/user/set-user/${selectedUserId}`, { method: 'POST' });
            }
            else if (e.key == 'Delete') {
                const selectedItem = userList[selectedUser];
                const deleteIcon = selectedItem.querySelector('.delete-icon');
                
                if (deleteIcon) {
                    // Trigger a click event on the delete icon to delete the user
                    deleteIcon.click();
                }
            }
        });
    });
</script>