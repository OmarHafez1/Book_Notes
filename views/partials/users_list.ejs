<div class="container py-5">
    <!-- Add User Form -->
    <div class="d-flex align-items-center mt-2 mb-5" style="max-width: 500px; margin: 0 auto;">
        <input type="text" id="new-user-name" class="form-control me-2" placeholder="Enter new user name"
            style="flex: 1;" />
        <button id="add-user-btn" class="btn btn-primary" style="flex-shrink: 0;">Add User</button>
    </div>

    <!-- List of users -->
    <div class="list-group" id="user-list">
        <% users.forEach((user)=> { %>
            <a href="#" class="list-group-item d-flex justify-content-between align-items-center"
                user-id="<%= user.id %>">
                <%= user.name %>
                    <i class="bi bi-trash text-danger delete-icon" style="cursor: pointer;"></i>
            </a>
            <% }) %>
    </div>
</div>

<script>
    let selectedUser = localStorage.getItem('selectedUser'); // Get the stored selected user index

    // Highlight the stored selected user on page load
    const userList = document.querySelectorAll('.list-group-item');

    if (selectedUser !== null && userList[selectedUser]) {
        userList[selectedUser].classList.add('active');
    }

    // Handle item selection
    userList.forEach((item, index) => {
        item.addEventListener('click', function () {
            // Remove 'active' from the previously selected item
            if (selectedUser !== null && userList[selectedUser]) {
                userList[selectedUser].classList.remove('active');
            }

            // Mark this as active
            this.classList.add('active');

            // Update the selected user index
            selectedUser = index;
            localStorage.setItem('selectedUser', selectedUser);
        });
    });

    // Handle delete functionality
    userList.forEach((item, index) => {
        item.querySelector('.delete-icon').addEventListener('click', async function (e) {
            e.stopPropagation(); // Prevent triggering the click event on the parent item

            const userId = item.getAttribute('user-id'); // Get the user ID from the data attribute

            console.log(userId);
            try {
                // Send DELETE request to the server
                const response = await fetch(`/user/delete/${userId}`, {
                    method: 'DELETE',
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    // Remove the item from the DOM
                    item.remove();

                    // Update the selected user if necessary
                    if (index === parseInt(selectedUser)) {
                        selectedUser = null;
                        localStorage.removeItem('selectedUser');
                    } else if (selectedUser !== null && index < selectedUser) {
                        selectedUser--; // Update the index if a preceding item is removed
                        localStorage.setItem('selectedUser', selectedUser);
                    }
                } else {
                    alert(result.error || 'Failed to delete user');
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                alert('An error occurred while deleting the user.');
            }
        });
    });

    // Handle Add User functionality
    document.getElementById('add-user-btn').addEventListener('click', async () => {
        const userNameInput = document.getElementById('new-user-name');
        const userName = userNameInput.value.trim();

        if (!userName) {
            alert('Please enter a valid name.');
            return;
        }

        try {
            // Send POST request to the server to add the user
            const response = await fetch('/user/add/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: userName }),
            });

            if (response.ok) {
                // Reload the page to refresh the user list
                location.reload();
            } else {
                alert('Failed to add user');
            }
        } catch (error) {
            console.error('Error adding user:', error);
            alert('An error occurred while adding the user.');
        }
    });

    // Handle Enter key press in the text field to trigger Add User functionality
    document.getElementById('new-user-name').addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
            e.preventDefault();  // Prevent the default action of the Enter key
            document.getElementById('add-user-btn').click();  // Trigger the button click
        }
    });
</script>
